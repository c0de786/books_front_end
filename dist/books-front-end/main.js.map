{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/book_list.service.ts","webpack:///./src/app/user.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-inverse\\\">\\n    <div class=\\\"container-fluid\\\">\\n        <div class=\\\"navbar-header\\\">\\n            <button type=\\\"button\\\" class=\\\"navbar-toggle\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#myNavbar\\\">\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n                <span class=\\\"icon-bar\\\"></span>\\n            </button>\\n            <a class=\\\"navbar-brand\\\" href=\\\"#\\\">Logo</a>\\n        </div>\\n        <div class=\\\"collapse navbar-collapse\\\" id=\\\"myNavbar\\\">\\n            <ul class=\\\"nav navbar-nav\\\">\\n                <li class=\\\"active\\\"><a href=\\\"#\\\">Home</a></li>\\n            </ul>\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\n\\n                <li *ngIf=\\\"!_userService.token\\\"><a data-toggle=\\\"modal\\\" data-target=\\\"#modalLoginForm\\\" href=\\\"#\\\">Login<span\\n                        class=\\\" glyphicon glyphicon-log-in\\\"></span> </a></li>\\n                <!--<li *ngIf=\\\"_userService.token\\\"><h3>{{ _userService.username }}</h3></li>-->\\n                <li *ngIf=\\\"_userService.token\\\"><a href=\\\"logout()\\\"> Logout<span\\n                        class=\\\"glyphicon glyphicon-log-out\\\"></span> </a></li>\\n\\n            </ul>\\n        </div>\\n    </div>\\n</nav>\\n\\n\\n<div class=\\\"container-fluid text-center\\\">\\n    <div class=\\\"row content\\\">\\n        <div class=\\\"col-sm-2 sidenav\\\">\\n        </div>\\n\\n        <div class=\\\"col-sm-8 text-left \\\">\\n            <div class=\\\"col-sm-12 text-center\\\" >\\n                <h2>Second Treasures Bookstore</h2>\\n            </div>\\n            <div class=\\\"col-sm-12 text-left\\\" *ngIf=\\\"_userService.token\\\">\\n                <button  type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#addBookModal\\\">\\n                    Add New Book\\n                </button>\\n            </div>\\n\\n\\n            <div class=\\\"col-sm-12 text-center\\\">\\n                <h4>List of all available books</h4>\\n            </div>\\n\\n            <table class=\\\"table\\\">\\n                <thead>\\n                <tr>\\n                    <th>ISBN</th>\\n                    <th>Title</th>\\n                    <th>Author</th>\\n                    <th>Genre</th>\\n                    <th>Price</th>\\n                    <th *ngIf=\\\"_userService.token\\\">Actions</th>\\n                </tr>\\n                </thead>\\n                <tbody>\\n                <tr *ngFor=\\\"let post of posts\\\">\\n                    <td>{{ post.id }}</td>\\n                    <td>{{ post.name }}</td>\\n                    <td>{{ post.author }}</td>\\n                    <td>{{ post.genre }}</td>\\n                    <td>${{ post.price }}</td>\\n                    <td *ngIf=\\\"_userService.token\\\">\\n                        <span>\\n                            <button class=\\\"btn btn-info\\\" type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" (click)=\\\"showEditBook(post)\\\" data-target=\\\"#updateBookModal\\\">\\n                            <span class=\\\"glyphicon glyphicon-edit\\\"></span>\\n                        </button>\\n                        </span>\\n                        <span>\\n                         <button (click)=\\\"deleteBook(post.id)\\\" class=\\\"btn btn-danger\\\">\\n                            <span class=\\\"glyphicon glyphicon-trash\\\"></span>\\n                        </button>\\n                        </span>\\n                    </td>\\n\\n\\n                </tr>\\n\\n                </tbody>\\n            </table>\\n\\n\\n            <div class=\\\"modal fade\\\" id=\\\"addBookModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"addBookModalLabel\\\"\\n                 aria-hidden=\\\"true\\\">\\n                <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n                    <div class=\\\"modal-content\\\">\\n                        <form id=\\\"add_form\\\">\\n                        <div class=\\\"modal-header\\\">\\n                            <h3 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Add New Book</h3>\\n                            <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                                <span aria-hidden=\\\"true\\\">&times;</span>\\n                            </button>\\n                        </div>\\n                        <div class=\\\"modal-body\\\">\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"title\\\">Book Title</label>\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"new_post.name\\\" id=\\\"title\\\"\\n                                       placeholder=\\\"Book Title\\\" name=\\\"post_name\\\">\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"author\\\">Author Name</label>\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"new_post.author\\\" id=\\\"author\\\"\\n                                       placeholder=\\\"Author Name\\\" name=\\\"author_name\\\">\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"genre\\\">Genre</label>\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"new_post.genre\\\" id=\\\"genre\\\"\\n                                       placeholder=\\\"Genre\\\" name=\\\"book_genre\\\">\\n                            </div>\\n                            <div class=\\\"form-group\\\">\\n                                <label for=\\\"price\\\">Price</label>\\n                                <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"new_post.price\\\" id=\\\"price\\\"\\n                                       placeholder=\\\"$Price\\\" name=\\\"book_price\\\">\\n                            </div>\\n\\n                        </div>\\n                        <div class=\\\"modal-footer\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button>\\n                            <button (click)=\\\"addBook();\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n                        </div>\\n                        </form>\\n                    </div>\\n                </div>\\n            </div>\\n\\n            <div class=\\\"modal fade\\\" id=\\\"updateBookModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"updateBookModalLabel\\\"\\n                 aria-hidden=\\\"true\\\">\\n                <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n                    <div class=\\\"modal-content\\\">\\n                            <form id=\\\"update_form\\\">\\n                            <div class=\\\"modal-header\\\">\\n                                <h3 class=\\\"modal-title\\\" id=\\\"updateBookModalLabel\\\">Update Book Details</h3>\\n                                <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                                    <span aria-hidden=\\\"true\\\">&times;</span>\\n                                </button>\\n                            </div>\\n                            <div class=\\\"modal-body\\\">\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"title\\\">Book Title</label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"bookdetails.name\\\" id=\\\"updateTitle\\\"\\n                                           placeholder=\\\"Book Title\\\" name=\\\"update_book_name\\\">\\n                                </div>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"author\\\">Author Name</label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"bookdetails.author\\\" id=\\\"updateAuthor\\\"\\n                                           placeholder=\\\"Author Name\\\" name=\\\"update_author_name\\\">\\n                                </div>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"genre\\\">Genre</label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"bookdetails.genre\\\" id=\\\"updateGenre\\\"\\n                                           placeholder=\\\"Genre\\\" name=\\\"update_book_genre\\\">\\n                                </div>\\n                                <div class=\\\"form-group\\\">\\n                                    <label for=\\\"price\\\">Price</label>\\n                                    <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"bookdetails.price\\\" id=\\\"updatePrice\\\"\\n                                           placeholder=\\\" $Price \\\" name=\\\"update_book_price\\\">\\n                                </div>\\n\\n                            </div>\\n                            <div class=\\\"modal-footer\\\">\\n                                <button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Close</button>\\n                                <button (click)=\\\"updateBook(bookdetails)\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button>\\n                            </div>\\n                            </form>\\n                    </div>\\n                </div>\\n            </div>\\n\\n        </div>\\n        <div class=\\\"col-sm-2 sidenav\\\">\\n        </div>\\n\\n\\n        <div class=\\\"modal fade\\\" id=\\\"modalLoginForm\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"loginFormlLabel\\\"\\n             aria-hidden=\\\"true\\\">\\n            <div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n                <div class=\\\"modal-content\\\">\\n                    <form id=\\\"login_form\\\">\\n                    <div class=\\\"modal-header\\\">\\n                        <h3 class=\\\"modal-title\\\" id=\\\"loginFormModel\\\">Login as Employee</h3>\\n                        <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"Close\\\">\\n                            <span aria-hidden=\\\"true\\\">&times;</span>\\n                        </button>\\n                    </div>\\n                    <div class=\\\"modal-body\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"login-username\\\" [(ngModel)]=\\\"user.username\\\"\\n                                   id=\\\"username\\\" placeholder=\\\"Username\\\">\\n                            <span *ngFor=\\\"let error of _userService.errors.username\\\"><br/>{{ error }}</span>\\n                        </div>\\n                        <div class=\\\"form-group\\\">\\n                            <input type=\\\"password\\\" class=\\\"form-control\\\" name=\\\"login-password\\\" [(ngModel)]=\\\"user.password\\\"\\n                                   id=\\\"password\\\" placeholder=\\\"Password\\\">\\n                            <span *ngFor=\\\"let error of _userService.errors.password\\\"><br/>{{ error }}</span>\\n                        </div>\\n\\n                    </div>\\n                    <div class=\\\"modal-footer\\\">\\n                        <div>\\n                            <span class=\\\"alert alert-danger error-msg\\\" *ngFor=\\\"let error of _userService.errors.non_field_errors\\\">{{ error }}</span>\\n                        </div>\\n                        <span><button (click)=\\\"login()\\\" class=\\\"btn btn-primary\\\">Log In</button></span>\\n\\n                    </div>\\n                    </form>\\n                </div>\\n\\n\\n\\n\\n            </div>\\n        </div>\\n    </div>\\n\\n\\n</div>\\n\\n\\n\\n\\n\\n\\n\\n\"","import {Component, OnInit} from '@angular/core';\nimport {BookListService} from './book_list.service';\nimport {UserService} from './user.service';\nimport {throwError} from 'rxjs';  // Angular 6/RxJS 6\ndeclare var $: any ;\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n/**\n   * An object representing the user for the login form\n   */\n  public user: any;\n  /**\n   * An array of all the BlogPost objects from the API\n   */\n  public posts;\n\n  /**\n   * An object representing the data in the \"add\" form\n   */\n  public new_post: any;\n  public bookdetails: any;\n\n\n\n    constructor(private _bookListService: BookListService, public _userService: UserService) { }\n\n  ngOnInit() {\n    this.getAllBooks();\n    this.new_post = {};\n    this.bookdetails = {};\n    this.user = {\n      username: '',\n      password: ''\n    };\n  }\n\n  login() {\n    this._userService.login({'username': this.user.username, 'password': this.user.password});\n  }\n\n  refreshToken() {\n    this._userService.refreshToken();\n  }\n\n  logout() {\n    this._userService.logout();\n  }\n\n  getAllBooks() {\n    this._bookListService.list().subscribe(\n      // the first argument is a function which runs on success\n      data => {\n        this.posts = data;\n        // console.log(data);\n\n      },\n      // the second argument is a function which runs on error\n      err => console.error(err),\n      // the third argument is a function which runs on completion\n       () => console.log('done loading booklist')\n    );\n  }\n\n  addBook() {\n    // console.log(this.new_post);\n    this._bookListService.create(this.new_post, this.user.token).subscribe(\n       data => {\n         // refresh the list\n         this.getAllBooks();\n         $('#addBookModal').modal('hide');\n         $('#add_form')[0].reset();\n         return true;\n       },\n       error => {\n        // console.error('Error saving!');\n         return throwError(error);\n       }\n    );\n  }\n  deleteBook(id) {\n      this._bookListService.delete(id, this.user.token).subscribe(\n          data => {\n              // refresh the list\n              this.getAllBooks();\n              return true;\n          },\n          error => {\n              console.error('Error saving booklist!');\n              return throwError(error);\n          }\n      );\n  }\n    showEditBook(book) {\n    this.bookdetails = book;\n    }\n\n    updateBook(book) {\n        this._bookListService.update(book, this.user.token).subscribe(\n            data => {\n                $('#updateBookModal').modal('hide');\n                $('#update_form')[0].reset();\n                // refresh the list\n                this.getAllBooks();\n                return true;\n            },\n            error => {\n                console.error(error);\n                return throwError(error);\n            }\n        );\n    }\n\n\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { BookListService } from './book_list.service';\nimport { UserService } from './user.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule, FormsModule, HttpClientModule\n  ],\n  providers: [BookListService, UserService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {UserService} from './user.service';\n\n@Injectable()\nexport class BookListService {\n\n    constructor(private http: HttpClient, private _userService: UserService) {\n    }\n    public  apiUrl = 'https://django-books-rest-api.herokuapp.com';\n    // Uses http.get() to load data from a single API endpoint\n    list() {\n        return this.http.get(this.apiUrl + '/all/');\n    }\n\n    // send a POST request to the API to create a new data object\n    create(post, token) {\n        return this.http.post(this.apiUrl + '/booklists/', JSON.stringify(post), this.getHttpOptions());\n    }\n\n    delete(id, token) {\n        return this.http.delete(this.apiUrl + '/booklists/' + id + '/', this.getHttpOptions());\n    }\n\n    update(book, token) {\n        return this.http.patch(this.apiUrl + '/booklists/' + book.id + '/', JSON.stringify(book), this.getHttpOptions());\n    }\n\n    // helper function to build the HTTP headers\n    getHttpOptions() {\n        return {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n                'Authorization': 'JWT ' + this._userService.token\n            })\n        };\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\n\n\ndeclare var $: any;\n\n@Injectable()\nexport class UserService {\n\n    // http options used for making API calls\n    private httpOptions: any;\n\n    // the actual JWT token\n    public token: string;\n\n    // the token expiration date\n    public token_expires: Date;\n\n    // the username of the logged in user\n    public username: string;\n\n    // error messages received from the login attempt\n    public errors: any = [];\n\n    constructor(private http: HttpClient) {\n        this.httpOptions = {\n            headers: new HttpHeaders({'Content-Type': 'application/json'})\n        };\n    }\n    public  apiUrl = 'https://django-books-rest-api.herokuapp.com/';\n    // Uses http.post() to get an auth token from djangorestframework-jwt endpoint\n    public login(user) {\n        this.http.post(this.apiUrl + '/api-token-auth/', JSON.stringify(user), this.httpOptions).subscribe(\n            data => {\n               // console.log('login success', data);\n                this.updateData(data['token']);\n                if (data['token']) {\n                    $('#login_form')[0].reset();\n                    $('#modalLoginForm').modal('hide');\n                }\n            },\n            err => {\n                console.error('login error', err);\n                this.errors = err['error'];\n            }\n        );\n    }\n\n    /**\n     * Refreshes the JWT token, to extend the time the user is logged in\n     */\n    public refreshToken() {\n        this.http.post(this.apiUrl +'/api-token-refresh/', JSON.stringify({token: this.token}), this.httpOptions).subscribe(\n            data => {\n               // console.log('refresh success', data);\n                this.updateData(data['token']);\n            },\n            err => {\n                console.error('refresh error', err);\n                this.errors = err['error'];\n            }\n        );\n    }\n\n    public logout() {\n        this.token = null;\n        this.token_expires = null;\n        this.username = null;\n    }\n\n    private updateData(token) {\n        this.token = token;\n        this.errors = [];\n\n        // decode the token to read the username and expiration timestamp\n        const token_parts = this.token.split(/\\./);\n        const token_decoded = JSON.parse(window.atob(token_parts[1]));\n        this.token_expires = new Date(token_decoded.exp * 1000);\n        this.username = token_decoded.username;\n    }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}